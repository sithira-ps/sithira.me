{
  "title": "Sample .md file",
  "date": "2016-03-08T00:00:00.000Z",
  "tags": [
    "markdown",
    "code",
    "features"
  ],
  "draft": false,
  "summary": "Example of a markdown file with code blocks and syntax highlighting",
  "body": {
    "raw": "\nA sample post with markdown.\n\n## Inline Highlighting\n\nSample of inline highlighting `sum = parseInt(num1) + parseInt(num2)`\n\n## Code Blocks\n\nSome Javascript code\n\n```javascript\nvar num1, num2, sum\nnum1 = prompt('Enter first number')\nnum2 = prompt('Enter second number')\nsum = parseInt(num1) + parseInt(num2) // \"+\" means \"add\"\nalert('Sum = ' + sum) // \"+\" means combine into a string\n```\n\nSome Python code 🐍\n\n```python\ndef fib():\n    a, b = 0, 1\n    while True:            # First iteration:\n        yield a            # yield 0 to start with and then\n        a, b = b, a + b    # a will now be 1, and b will also be 1, (0 + 1)\n\nfor index, fibonacci_number in zip(range(10), fib()):\n     print('{i:3}: {f:3}'.format(i=index, f=fibonacci_number))\n```\n",
    "code": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),x=(e,n)=>{for(var r in n)i(e,r,{get:n[r],enumerable:!0})},m=(e,n,r,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of u(n))!g.call(e,a)&&a!==r&&i(e,a,{get:()=>n[a],enumerable:!(o=p(n,a))||o.enumerable});return e};var w=(e,n,r)=>(r=e!=null?h(f(e)):{},m(n||!e||!e.__esModule?i(r,\"default\",{value:e,enumerable:!0}):r,e)),_=e=>m(i({},\"__esModule\",{value:!0}),e);var c=b((I,s)=>{s.exports=_jsx_runtime});var j={};x(j,{default:()=>l,frontmatter:()=>y});var t=w(c()),y={title:\"Sample .md file\",date:\"2016-03-08\",tags:[\"markdown\",\"code\",\"features\"],draft:!1,summary:\"Example of a markdown file with code blocks and syntax highlighting\"};function d(e){let n={code:\"code\",h2:\"h2\",p:\"p\",pre:\"pre\",...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:\"A sample post with markdown.\"}),`\n`,(0,t.jsx)(n.h2,{children:\"Inline Highlighting\"}),`\n`,(0,t.jsxs)(n.p,{children:[\"Sample of inline highlighting \",(0,t.jsx)(n.code,{children:\"sum = parseInt(num1) + parseInt(num2)\"})]}),`\n`,(0,t.jsx)(n.h2,{children:\"Code Blocks\"}),`\n`,(0,t.jsx)(n.p,{children:\"Some Javascript code\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-javascript\",children:`var num1, num2, sum\nnum1 = prompt('Enter first number')\nnum2 = prompt('Enter second number')\nsum = parseInt(num1) + parseInt(num2) // \"+\" means \"add\"\nalert('Sum = ' + sum) // \"+\" means combine into a string\n`})}),`\n`,(0,t.jsx)(n.p,{children:\"Some Python code \\u{1F40D}\"}),`\n`,(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:\"language-python\",children:`def fib():\n    a, b = 0, 1\n    while True:            # First iteration:\n        yield a            # yield 0 to start with and then\n        a, b = b, a + b    # a will now be 1, and b will also be 1, (0 + 1)\n\nfor index, fibonacci_number in zip(range(10), fib()):\n     print('{i:3}: {f:3}'.format(i=index, f=fibonacci_number))\n`})})]})}function l(e={}){let{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}return _(j);})();\n;return Component;"
  },
  "_id": "code-sample.mdx",
  "_raw": {
    "sourceFilePath": "code-sample.mdx",
    "sourceFileName": "code-sample.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "code-sample"
  },
  "type": "Post",
  "url": "/blog/code-sample",
  "path": "code-sample",
  "slug": "code-sample",
  "filePath": "code-sample.mdx",
  "toc": [
    {
      "value": "Inline Highlighting",
      "url": "#inline-highlighting",
      "depth": 2
    },
    {
      "value": "Code Blocks",
      "url": "#code-blocks",
      "depth": 2
    }
  ]
}